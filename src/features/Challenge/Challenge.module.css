/*
https://flexboxfroggy.com/

Flexbox options:
justify-content: (horizontal pos)
    flex-start: Items align to the left side of the container.
    flex-end: Items align to the right side of the container.
    center: Items align at the center of the container.
    space-between: Items display with equal spacing between them.
    space-around: Items display with equal spacing around them.
    space-evenly: ??


align-items: (vertical pos)
    flex-start: Items align to the top of the container.
    flex-end: Items align to the bottom of the container.
    center: Items align at the vertical center of the container.
    baseline: Items display at the baseline of the container.
    stretch: Items are stretched to fit the container.

flex-direction: (order of items)
    row: Items are placed the same as the text direction.
    row-reverse: Items are placed opposite to the text direction.
        Notice that when you set the direction to a reversed row or column, start and end are also reversed.
    column: Items are placed top to bottom.
    column-reverse: Items are placed bottom to top.
        Notice that when the flex direction is a column, justify-content changes to the vertical and align-items to the horizontal.    
    
order: shift elements up and down in the order of elements
    takes an integer. 0 is the original DOM location, -1, 1, 4, etc will move it up or down that number.
    although -1 looks interesting. ??? need to investigate further


align-self: same as align-items but applies to one element (I think?)
    flex-start: Item aligns to the top of the container.
    flex-end: Item aligns to the bottom of the container.
    center: Item aligns at the vertical center of the container.
    baseline: Item displays at the baseline of the container.
    stretch: Item is stretched to fit the container.

flex-wrap: Squeeze items onto a single line or no?
    nowrap: Every item is fit to a single line.
    wrap: Items wrap around to additional lines.
    wrap-reverse: Items wrap around to additional lines in reverse.

flex-flow: combines flex-direction and flex-wrap
    you can do something like flex-flow: column wrap

align-content: (stretch is the default)
    flex-start: Lines are packed at the top of the container.
    flex-end: Lines are packed at the bottom of the container.
    center: Lines are packed at the vertical center of the container.
    space-between: Lines display with equal spacing between them.
    space-around: Lines display with equal spacing around them.
    stretch: Lines are stretched to fit the container.    
*/

.challenge {
  padding: 1rem;
}
@media only screen and (max-width: 880px) {
  .challenge {
    padding: 0.6rem 0.1rem 0.6rem 0.1rem;
  }
}
.challenge button {
  width: 90%;
}

.arena {
  /*height: 80%;*/
  display: flex;
  justify-content: space-around;
  align-items: center;
  flex-direction: column;
  /*flex-wrap: nowrap;*/
}

.arena-item-box {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  width: 100%;
  margin: 0.5rem 0 0.5rem 0;
}

.arena-item {
  height: 30rem;
  text-align: center;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  /*width: 100%;*/
  box-shadow: 4px 4px 4px #353b5e;
  overflow: hidden;
}

.item-counter {
  position: absolute;
  z-index: 1;
  padding: 0.4rem;
  color: white;
  background-color: rgba(255, 255, 255, 0.2);
  border-radius: 0 0 0.2rem 0;
}

.arena-prompt-box {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  flex: 1; /* fill all horizontal space you can find */
  /*width: 50%;*/
}

.challenge-load-area {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Overwrite some rules if the prompt box needs to contain an image:
-Move prompt text to the bottom and turn into a caption */
.arena-prompt-box-image {
  text-align: center;
  flex-direction: column;
  justify-content: end;
  position: relative;
}

.test {
  background-size: contain;
  height: 100%;
  width: 100%;
  background-position: center;
  background-repeat: no-repeat;
  background-size: auto;
}
.arena-answer-box {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  flex: 1; /* fill all horizontal space you can find */
  /*width: 50%;*/
}

.arena-prompt {
  padding: 0.5rem;
}

.arena-prompt-image-caption {
  position: absolute;
  background-color: rgba(104, 116, 185, 0.8);
  color: rgb(255, 255, 255);
  z-index: 1;
  bottom: 0;
  position: absolute;
  left: 0;
  right: 0;
  text-align: center;
  font-weight: 600;
}

.arena-answer {
  padding: 0.5rem;
}

.item-light {
  background: #d9d9f5;
  color: black;
}

.item-dark {
  background: #6874b9;
  color: white;
}

.rounded-outline {
  /*padding: 10px;
  margin: 10px;*/
  /*
  color: white;
  height: 150px;
  */
}
